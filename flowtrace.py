# -*- coding: utf-8 -*-
"""
/***************************************************************************
 flowTrace
                                 A QGIS plugin
 This plugin will select all upstream lines
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-05-14
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Ed B
        email                : boesiii@yahoo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
# from PyQt5.QtWidgets import QAction
from PyQt5.QtWidgets import QAction, QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .flowtrace_dialog import flowTraceDialog
import os.path
from qgis.gui import QgsMessageBar
from qgis.core import QgsFeatureRequest, QgsRectangle, QgsDistanceArea, QgsWkbTypes

class flowTrace:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'flowTrace_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Flow Trace')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('flowTrace', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/flowtrace/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Flow Trace'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Flow Trace'),
                action)
            self.iface.removeToolBarIcon(action)

    # get geometry from different geometry types
    def get_geometry (self, fg):
        # test for multilinestring
        if fg.wkbType() == 5: 
            nodes = fg.asMultiPolyline()[0]
            return nodes
                        
        # test for linesting
        if fg.wkbType() == 2:
            nodes = fg.asPolyline()
            return nodes
        
    
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = flowTraceDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            #setup final selection list
            final_list = []
            #setup temporary selection list
            selection_list = []
            #add tolerance value
            tolerance = 1
            #get current layer
            clayer = self.iface.mapCanvas().currentLayer()
            # print (clayer)
            
            if clayer is None:
                return 
        
            #get provider
            provider = clayer.dataProvider()
            
            #get selected features
            features = clayer.selectedFeatures()
            
            # get crs for tolerance setting
            crs = self.iface.activeLayer().crs().authid()
            # print (crs)
            if crs == 'EPSG:4269':
                rec = .0001
                tolerance = .0001
            else:
                rec = .1
                
            #iterate thru features to add to lists
            for feature in features:            
                # add selected features to final list
                final_list.append(feature.id())
                # add selected features to selection list for while loop
                selection_list.append(feature.id())
                #get feature geometry
                geom = feature.geometry()
                # print (feature.geometry())
                # print ('type: ' + str(geom.wkbType()))
                # print ('string: ' + QgsWkbTypes.displayString(geom.wkbType()))
                # print ('geometry is: ' + str(geom.type()))
                # if geom.type() != QgsWkbTypes.LineGeometry:
                # https://qgis.org/api/classQgsWkbTypes.html
                if geom.type() != 1:
                    print ("Geometry not allowed")
                    QMessageBox.information(None, "Flow Trace",
                                    "Geometry not allowed, \nPlease select line geometry only.")
                    return
                    
            #loop thru selection list
            while selection_list:
                
                #get selected features
                request = QgsFeatureRequest().setFilterFid(selection_list[0])
                # request = QgsFeatureRequest()
                feature = next(clayer.getFeatures(request))
                geom = feature.geometry()

                # get nodes
                nodes = self.get_geometry (feature.geometry())
                # print(nodes)
                
                # get upstream node
                upstream_coord = nodes[0]
                # print (upstream_coord)
                                
                # select all features around upstream coordinate 
                # using a bounding box
                rectangle = QgsRectangle(upstream_coord.x() - rec, 
                                upstream_coord.y() - rec, 
                                upstream_coord.x() + rec, 
                                upstream_coord.y() + rec)
                # rectangle = QgsRectangle (minx, miny, maxx, maxy)
                request = QgsFeatureRequest().setFilterRect(rectangle)
                features = clayer.getFeatures(request)
                
                 #iterate thru requested features
                for feature in features:
                    # get nodes
                    nodes = self.get_geometry (feature.geometry())
                    downstream_coord = nodes[-1]
                    
                    #setup distance
                    distance = QgsDistanceArea()
                    
                    #get distance from downstream node to upstream node
                    dist = distance.measureLine(downstream_coord, 
                                    upstream_coord)
                    
                    if dist < tolerance:
                        #add feature to final list
                        final_list.append(feature.id())
                        
                        if feature.id() not in selection_list:
                            #add feature to selection list
                            selection_list.append(feature.id())
                            
                
                
                #remove feature from selection list
                selection_list.pop(0)
                
        #select features using final_list           
        # clayer.setSelectedFeatures(final_list)
        # print (final_list)
        # clayer.selectByIds([s.id() for s in final_list])
        for fid in final_list:
            clayer.select(fid)
        
        
        #refresh the canvas
        self.iface.mapCanvas().refresh()
        QMessageBox.information(None, 
                        "Flow Trace Complete", 
                        "Total Features Selected: " 
                        + str(len(final_list)))
               
